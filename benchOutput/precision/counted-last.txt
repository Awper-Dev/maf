;;; working on test/R5RS/scp1/flip2.scm

(letrec ((_string=?0 (lambda (_s10 _s20)
                       (assert (string? _s10))
                       (assert (string? _s20))
                       (if (= (string-length _s10) (string-length _s20))
                          ((letrec ((_loop0 (lambda (_i0)
                                             (if (< _i0 0)
                                                #t
                                                (if (char=? (string-ref _s10 _i0) (string-ref _s20 _i0))
                                                   (_loop0 (- _i0 1))
                                                   #f)))))
                             _loop0)
                             (- (string-length _s10) 1))
                          #f)))
         (___toplevel_cons0 cons)
         (_equal?0 (lambda (_a0 _b0)
                     (let ((___or_res0 (eq? _a0 _b0)))
                        (if ___or_res0
                           ___or_res0
                           (let ((___or_res1 (if (null? _a0) (null? _b0) #f)))
                              (if ___or_res1
                                 ___or_res1
                                 (let ((___or_res2 #f))
                                    (if #f
                                       #f
                                       (let ((___or_res3 (if (pair? _a0)
                                                           (if (pair? _b0)
                                                              (if (_equal?0 (car _a0) (car _b0))
                                                                 (_equal?0 (cdr _a0) ())
                                                                 #f)
                                                              #f)
                                                           #f)))
                                          (if ___or_res3 ___or_res3 #f))))))))))
         (___toplevel_set-cdr!0 set-cdr!)
         (___toplevel_cdr0 cdr)
         (_result0 (___toplevel_cons0 'ref ()))
         (_output0 (lambda (_i2)
                     (___toplevel_set-cdr!0 _result0 (cons _i2 ()))))
         (_hulp0 (___toplevel_cons0 'ref 2))
         (_haha0 (lambda (_x0)
                   (let ((_hulp1 (* _x0 (___toplevel_cdr0 _hulp0))))
                      (_output0 _hulp1))
                   (_output0 (___toplevel_cdr0 _hulp0))
                   (___toplevel_set-cdr!0 _hulp0 4)))
         (__00 (_haha0 2))
         (__10 (_haha0 3))
         (__20 (_equal?0
                 (___toplevel_cdr0 _result0)
                 (___toplevel_cons0 4 (___toplevel_cons0 12 (___toplevel_cons0 2 (___toplevel_cons0 4 ())))))))
   __20)
other: k: 1 gc: false res: (206,Map(ifStatement -> 2, var -> 2, functionCall -> 2, letRec -> 1),0)
other: k: 2 gc: false res: (88,Map(letRec -> 1),0)
other: k: 3 gc: false res: (88,Map(letRec -> 1),0)
other: k: 0 gc: true res: (88,Map(letRec -> 1),0)
other: k: 1 gc: true res: (88,Map(letRec -> 1),0)
other: k: 2 gc: true res: (88,Map(letRec -> 1),0)
other: k: 3 gc: true res: (88,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/cashdesk-counter.scm

other: k: 1 gc: false res: (392,Map(letRec -> 1),0)
other: k: 2 gc: false res: (392,Map(letRec -> 1),0)
other: k: 3 gc: false res: (392,Map(letRec -> 1),0)
other: k: 0 gc: true res: (25,Map(functionCall -> 4, var -> 1),0)
other: k: 1 gc: true res: (392,Map(letRec -> 1),0)
other: k: 2 gc: true res: (392,Map(letRec -> 1),0)
other: k: 3 gc: true res: (392,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/ring-copy.scm

other: k: 1 gc: false res: (682,Map(letRec -> 1),0)
other: k: 2 gc: false res: (682,Map(letRec -> 1),0)
other: k: 3 gc: false res: (682,Map(letRec -> 1),0)
other: k: 0 gc: true res: (682,Map(letRec -> 1),0)
other: k: 1 gc: true res: (682,Map(letRec -> 1),0)
other: k: 2 gc: true res: (682,Map(letRec -> 1),0)
other: k: 3 gc: true res: (682,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/third-root.scm

other: k: 1 gc: false res: (12,Map(var -> 3, functionCall -> 1),0)
other: k: 2 gc: false res: (12,Map(var -> 3, functionCall -> 1),0)
other: k: 3 gc: false res: (12,Map(var -> 3, functionCall -> 1),0)
other: k: 0 gc: true res: (117,Map(letRec -> 1),0)
other: k: 1 gc: true res: (117,Map(letRec -> 1),0)
other: k: 2 gc: true res: (117,Map(letRec -> 1),0)
other: k: 3 gc: true res: (117,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/add-to-end.scm

other: k: 1 gc: false res: (140,Map(ifStatement -> 2, var -> 4, functionCall -> 4),0)
other: k: 2 gc: false res: (163,Map(ifStatement -> 3, var -> 4, functionCall -> 3),0)
other: k: 3 gc: false res: (163,Map(ifStatement -> 3, var -> 4, functionCall -> 3),0)
other: k: 0 gc: true res: (183,Map(ifStatement -> 4, var -> 8, functionCall -> 3),0)
other: k: 1 gc: true res: (183,Map(ifStatement -> 4, var -> 8, functionCall -> 3),0)
other: k: 2 gc: true res: (183,Map(ifStatement -> 4, var -> 8, functionCall -> 3),0)
other: k: 3 gc: true res: (183,Map(ifStatement -> 4, var -> 8, functionCall -> 3),0)
---------------------
;;; working on test/R5RS/scp1/flip.scm

other: k: 1 gc: false res: (83,Map(letRec -> 1),0)
other: k: 2 gc: false res: (83,Map(letRec -> 1),0)
other: k: 3 gc: false res: (83,Map(letRec -> 1),0)
other: k: 0 gc: true res: (83,Map(letRec -> 1),0)
other: k: 1 gc: true res: (83,Map(letRec -> 1),0)
other: k: 2 gc: true res: (83,Map(letRec -> 1),0)
other: k: 3 gc: true res: (83,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/calc-e-and-cos.scm

other: k: 1 gc: false res: (19,Map(var -> 7, functionCall -> 1),0)
other: k: 2 gc: false res: (19,Map(var -> 7, functionCall -> 1),0)
other: k: 3 gc: false res: (19,Map(var -> 7, functionCall -> 1),0)
other: k: 0 gc: true res: (365,Map(letRec -> 1),0)
other: k: 1 gc: true res: (365,Map(letRec -> 1),0)
other: k: 2 gc: true res: (365,Map(letRec -> 1),0)
other: k: 3 gc: true res: (365,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/simpson-integral.scm

other: k: 1 gc: false res: (34,Map(var -> 9, functionCall -> 3),0)
other: k: 2 gc: false res: (34,Map(var -> 9, functionCall -> 3),0)
other: k: 3 gc: false res: (34,Map(var -> 9, functionCall -> 3),0)
other: k: 0 gc: true res: (289,Map(letRec -> 1),0)
other: k: 1 gc: true res: (289,Map(letRec -> 1),0)
other: k: 2 gc: true res: (289,Map(letRec -> 1),0)
other: k: 3 gc: true res: (289,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/haha.scm

other: k: 1 gc: false res: (118,Map(ifStatement -> 2, var -> 2, functionCall -> 2),0)
other: k: 2 gc: false res: (123,Map(ifStatement -> 2, var -> 2, functionCall -> 3),0)
other: k: 3 gc: false res: (123,Map(ifStatement -> 2, var -> 2, functionCall -> 3),0)
other: k: 0 gc: true res: (122,Map(var -> 4, ifStatement -> 2, functionCall -> 2),0)
other: k: 1 gc: true res: (122,Map(var -> 4, ifStatement -> 2, functionCall -> 2),0)
other: k: 2 gc: true res: (392,Map(letRec -> 1),0)
other: k: 3 gc: true res: (392,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/counter.scm

other: k: 1 gc: false res: (436,Map(letRec -> 1),0)
other: k: 2 gc: false res: (436,Map(letRec -> 1),0)
other: k: 3 gc: false res: (436,Map(letRec -> 1),0)
other: k: 0 gc: true res: (436,Map(letRec -> 1),0)
other: k: 1 gc: true res: (436,Map(letRec -> 1),0)
other: k: 2 gc: true res: (436,Map(letRec -> 1),0)
other: k: 3 gc: true res: (436,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/leap-year.scm

other: k: 1 gc: false res: (294,Map(letRec -> 1),0)
other: k: 2 gc: false res: (294,Map(letRec -> 1),0)
other: k: 3 gc: false res: (294,Map(letRec -> 1),0)
other: k: 0 gc: true res: (294,Map(letRec -> 1),0)
other: k: 1 gc: true res: (294,Map(letRec -> 1),0)
other: k: 2 gc: true res: (294,Map(letRec -> 1),0)
other: k: 3 gc: true res: (294,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/list-compare-n.scm

other: k: 1 gc: false res: (128,Map(functionCall -> 8),0)
other: k: 2 gc: false res: (210,Map(functionCall -> 10),0)
other: k: 3 gc: false res: (338,Map(functionCall -> 12, var -> 7),0)
other: k: 0 gc: true res: (642,Map(letRec -> 1),0)
other: k: 1 gc: true res: (642,Map(letRec -> 1),0)
other: k: 2 gc: true res: (642,Map(letRec -> 1),0)
other: k: 3 gc: true res: (642,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/find-cycles.scm

other: k: 1 gc: false res: (41,Map(functionCall -> 5, var -> 3),0)
other: k: 2 gc: false res: (41,Map(functionCall -> 5, var -> 3),0)
other: k: 3 gc: false res: (276,Map(letRec -> 1),0)
other: k: 0 gc: true res: (276,Map(letRec -> 1),0)
other: k: 1 gc: true res: (276,Map(letRec -> 1),0)
other: k: 2 gc: true res: (276,Map(letRec -> 1),0)
other: k: 3 gc: true res: (276,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/fast-multiply.scm

other: k: 1 gc: false res: (0,Map(),0)
other: k: 2 gc: false res: (0,Map(),0)
other: k: 3 gc: false res: (18,Map(functionCall -> 2),0)
other: k: 0 gc: true res: (213,Map(letRec -> 1),0)
other: k: 1 gc: true res: (213,Map(letRec -> 1),0)
other: k: 2 gc: true res: (213,Map(letRec -> 1),0)
other: k: 3 gc: true res: (213,Map(letRec -> 1),0)
