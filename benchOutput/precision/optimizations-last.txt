;;; working on test/R5RS/scp1/flip2.scm

base: k0 GC OFF(1000,Map(letRec -> 1),0)
other: k: 1 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 0 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 1 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: true res: (1000,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/cashdesk-counter.scm

base: k0 GC OFF(322,Map(value -> 54, functionCall -> 6, var -> 2),0)
other: k: 1 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 0 gc: true res: (322,Map(value -> 53, functionCall -> 5, var -> 1),0)
other: k: 1 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: true res: (1000,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/ring-copy.scm

base: k0 GC OFF(1000,Map(letRec -> 1),0)
other: k: 1 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 0 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 1 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: true res: (1000,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/third-root.scm

base: k0 GC OFF(74,Map(functionCall -> 4, value -> 4),0)
other: k: 1 gc: false res: (74,Map(functionCall -> 3, value -> 5, var -> 1),0)
other: k: 2 gc: false res: (127,Map(functionCall -> 2, value -> 2, letRec -> 1),0)
other: k: 3 gc: false res: (127,Map(functionCall -> 2, value -> 2, letRec -> 1),0)
other: k: 0 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 1 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: true res: (1000,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/add-to-end.scm

base: k0 GC OFF(1000,Map(letRec -> 1),0)
other: k: 1 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: false res: (121,Map(var -> 6, ifStatement -> 4, value -> 4, functionCall -> 1),0)
other: k: 3 gc: false res: (121,Map(var -> 6, ifStatement -> 4, value -> 4, functionCall -> 1),0)
adding
adding
adding
adding
adding
adding
adding
adding
adding
adding
other: k: 0 gc: true res: (94,Map(var -> 6, ifStatement -> 4, value -> 16),0)
adding
adding
adding
adding
adding
adding
adding
adding
other: k: 1 gc: true res: (94,Map(var -> 6, ifStatement -> 4, value -> 16),0)
adding
adding
adding
adding
adding
adding
adding
adding
other: k: 2 gc: true res: (94,Map(var -> 6, ifStatement -> 4, value -> 16),0)
adding
adding
adding
adding
adding
adding
adding
adding
other: k: 3 gc: true res: (94,Map(var -> 6, ifStatement -> 4, value -> 16),0)
---------------------
;;; working on test/R5RS/scp1/flip.scm

base: k0 GC OFF(1000,Map(letRec -> 1),0)
other: k: 1 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 0 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 1 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: true res: (1000,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/calc-e-and-cos.scm

base: k0 GC OFF(1000,Map(letRec -> 1),0)
other: k: 1 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 0 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 1 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: true res: (1000,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/simpson-integral.scm

base: k0 GC OFF(345,Map(functionCall -> 7, var -> 11, value -> 8, let -> 1),0)
other: k: 1 gc: false res: (350,Map(functionCall -> 6, var -> 7, value -> 7, let -> 1),0)
other: k: 2 gc: false res: (278,Map(functionCall -> 5, var -> 12, value -> 12),0)
other: k: 3 gc: false res: (278,Map(functionCall -> 4, var -> 11, value -> 15),0)
other: k: 0 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 1 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: true res: (1000,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/haha.scm

base: k0 GC OFF(1000,Map(letRec -> 1),0)
other: k: 1 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 0 gc: true res: (230,Map(functionCall -> 3, var -> 4, value -> 14, ifStatement -> 2),0)
other: k: 1 gc: true res: (230,Map(functionCall -> 3, var -> 4, value -> 14, ifStatement -> 2),0)
other: k: 2 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: true res: (1000,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/counter.scm

base: k0 GC OFF(1000,Map(letRec -> 1),0)
other: k: 1 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 0 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 1 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: true res: (1000,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/leap-year.scm

base: k0 GC OFF(195,Map(functionCall -> 3, var -> 7, value -> 26),0)
other: k: 1 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 0 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 1 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: true res: (1000,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/list-compare-n.scm

base: k0 GC OFF(1000,Map(letRec -> 1),0)
other: k: 1 gc: false res: (212,HashMap(let -> 2, value -> 70, var -> 6, letRec -> 1, functionCall -> 3),0)
other: k: 2 gc: false res: (164,Map(functionCall -> 8, var -> 6, value -> 51, let -> 1),0)
other: k: 3 gc: false res: (150,Map(functionCall -> 9, var -> 5, value -> 24, let -> 1),0)
other: k: 0 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 1 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: true res: (1000,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/find-cycles.scm

base: k0 GC OFF(172,Map(functionCall -> 3, value -> 20, var -> 1),0)
other: k: 1 gc: false res: (147,Map(value -> 17, functionCall -> 3),0)
other: k: 2 gc: false res: (151,Map(value -> 17, functionCall -> 4),0)
other: k: 3 gc: false res: (1000,Map(letRec -> 1),0)
other: k: 0 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 1 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: true res: (1000,Map(letRec -> 1),0)
---------------------
;;; working on test/R5RS/scp1/fast-multiply.scm

base: k0 GC OFF(273,Map(value -> 9, functionCall -> 7, ifStatement -> 1, letRec -> 1),0)
other: k: 1 gc: false res: (145,Map(value -> 22, functionCall -> 1),0)
other: k: 2 gc: false res: (137,Map(value -> 23),0)
other: k: 3 gc: false res: (116,Map(value -> 15, functionCall -> 2),0)
other: k: 0 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 1 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 2 gc: true res: (1000,Map(letRec -> 1),0)
other: k: 3 gc: true res: (1000,Map(letRec -> 1),0)

Process finished with exit code 0
